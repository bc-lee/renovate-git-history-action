import * as core from "@actions/core"
import * as fs from "fs"
import {Octokit} from "@octokit/core"
import {getGitHistoryDescription, parseTable} from "./util"

const signature = "Written by renovate-git-history-action."

async function run(): Promise<void> {
  try {
    const token = core.getInput("token")
    if (!token) {
      core.setFailed("No token found.")
      return
    }
    core.setSecret(token)

    // load event.json
    const eventPath = process.env.GITHUB_EVENT_PATH as string
    const event = JSON.parse(fs.readFileSync(eventPath, "utf8"))

    // check if we are in the pull_request event
    if (!event.pull_request) {
      core.setFailed("No pull request found.")
      return
    }

    const owner = event.repository.owner.login
    const repo = event.repository.name
    const prNumber = event.pull_request.number
    const prBody = event.pull_request.body as string
    if (!prBody) {
      core.setFailed("No PR body found.")
      return
    }

    // check if this PR is created by renovate bot
    // Body will contain "This PR has been generated by [Mend Renovate"
    const bodyRegex = /This PR has been generated by \[\w+ Renovate/
    if (!bodyRegex.test(prBody)) {
      core.info("This PR is not created by renovate bot.")
      return
    }

    const gitUpdates = await parseTable(prBody)
    if (!gitUpdates) {
      core.info("No updates found.")
      return
    }

    core.info("Found updates for the following packages:")
    core.info(gitUpdates.map(update => update.url).join("\n"))

    // Find a comment from renovate-git-history-action
    const octokit = new Octokit({auth: token})
    const comments = await octokit.request(
      "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
      {
        owner,
        repo,
        issue_number: prNumber
      }
    )
    const existingCommentId = comments.data.find(c =>
      c.body?.includes(signature)
    )?.id

    // Now, create comment message for each git update
    let description = "# Changes from git digests\n\n"
    for (const gitUpdate of gitUpdates) {
      description += await getGitHistoryDescription(gitUpdate)
    }

    description += `\n\n${signature}\n`

    core.debug(`Description: \n${description}`)

    if (existingCommentId) {
      // Update the comment
      await octokit.request(
        "PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}",
        {
          owner,
          repo,
          comment_id: existingCommentId,
          body: description
        }
      )
      core.info(`Comment #${existingCommentId} updated.`)
      return
    }

    // Create a comment on the PR
    const result = await octokit.request(
      "POST /repos/{owner}/{repo}/issues/{issue_number}/comments",
      {
        owner,
        repo,
        issue_number: prNumber,
        body: description
      }
    )
    core.info(`Comment #${result.data.id} created.`)
  } catch (error) {
    core.setFailed(`${error.message}\n${error.stack}`)
  }
}

run()
